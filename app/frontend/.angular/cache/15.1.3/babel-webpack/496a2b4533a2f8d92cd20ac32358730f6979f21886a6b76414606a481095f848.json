{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth-service.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/toolbar\";\nimport * as i10 from \"@angular/forms\";\nfunction LoginComponent_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      senha: new FormControl(null, [Validators.required])\n    });\n  }\n  login() {\n    if (!this.loginForm.valid) {\n      return;\n    }\n    this.authService.login(this.loginForm.value).subscribe();\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthServiceService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 18,\n  vars: 3,\n  consts: [[\"fxLayoutAlign\", \"center center\", \"fxFlexFill\", \"\", 1, \"main-div\"], [\"fxFlex\", \"25\"], [\"fxLayoutAlign\", \"street\", \"fxLayout\", \"column\", 1, \"farm-class\", 3, \"formGroup\", \"ngSubmit\"], [\"matInput\", \"\", \"placeholder\", \"Ex: path@exemple.com\", \"formControlName\", \"email\"], [4, \"ngIf\"], [1, \"example-full-width\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"senha\", \"formControlName\", \"senha\"], [\"mat-raised-button\", \"\", \"type\", \"submit\"], [\"mat-raised-button\", \"\", 3, \"routerLink\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-toolbar\");\n      i0.ɵɵtext(3, \"P\\u00E1gina de Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementStart(5, \"mat-form-field\")(6, \"mat-label\");\n      i0.ɵɵtext(7, \"E-mail\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 3);\n      i0.ɵɵtemplate(9, LoginComponent_mat_error_9_Template, 2, 0, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-form-field\", 5)(11, \"mat-label\");\n      i0.ɵɵtext(12, \"Senha\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 7);\n      i0.ɵɵtext(15, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\", 8);\n      i0.ɵɵtext(17, \"Register-se\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_1_0.hasError(\"required\")));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"routerLink\", \"registre-se\");\n    }\n  },\n  dependencies: [i3.NgIf, i2.RouterLink, i4.DefaultLayoutDirective, i4.DefaultLayoutAlignDirective, i4.FlexFillDirective, i4.DefaultFlexDirective, i5.MatFormField, i5.MatLabel, i5.MatError, i6.MatInput, i7.MatButton, i8.MatCard, i9.MatToolbar, i10.ɵNgNoValidate, i10.DefaultValueAccessor, i10.NgControlStatus, i10.NgControlStatusGroup, i10.FormGroupDirective, i10.FormControlName],\n  styles: [\".main-div[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]{\\n    padding: 0px;\\n}\\n\\n.farm-class[_ngcontent-%COMP%] {\\n    padding: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiLm1haW4tZGl2IG1hdC1jYXJke1xuICAgIHBhZGRpbmc6IDBweDtcbn1cblxuLmZhcm0tY2xhc3Mge1xuICAgIHBhZGRpbmc6IDIwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;;;ICQ3DC,iCAA6G;IAC3GA,kCAAiB;IAAAA,iBAAY;;;ADAvC,OAAM,MAAOC,cAAc;EAMzBC,YACUC,WAA+B,EAC/BC,MAAc;IADd,gBAAW,GAAXD,WAAW;IACX,WAAM,GAANC,MAAM;IAPlB,cAAS,GAAc,IAAIN,SAAS,CAAC;MACjCO,KAAK,EAAE,IAAIR,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACM,KAAK,CAAC,CAAC;MACtEE,KAAK,EAAE,IAAIV,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACO,QAAQ,CAAC;KAClD,CAAC;EAKE;EAENE,KAAK;IACD,IAAI,CAAC,IAAI,CAACC,SAAS,CAACC,KAAK,EAAE;MACzB;;IAEF,IAAI,CAACP,WAAW,CAACK,KAAK,CAAC,IAAI,CAACC,SAAS,CAACE,KAAK,CAAC,CAACC,SAAS,EAAE;EAC1D;;AAhBWX,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAY;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV3BjB,8BAA+D;MAE9CA,oCAAe;MAAAA,iBAAc;MAC1CA,+BACuB;MAArBA;QAAA,OAAYkB,WAAO;MAAA,EAAC;MAEpBlB,sCAAgB;MACHA,sBAAM;MAAAA,iBAAY;MAC7BA,2BAA2E;MAC3EA,2EAC+B;MACjCA,iBAAiB;MAGjBA,0CAA2C;MAC9BA,sBAAK;MAAAA,iBAAY;MAC5BA,4BAA4E;MAC9EA,iBAAiB;MACjBA,kCAAwC;MAAAA,sBAAK;MAAAA,iBAAS;MACtDA,kCAAuD;MAAAA,4BAAW;MAAAA,iBAAS;;;;MAhBXA,eAAuB;MAAvBA,yCAAuB;MAMzEA,eAA+F;MAA/FA,0LAA+F;MAUnFA,eAA4B;MAA5BA,0CAA4B","names":["FormControl","FormGroup","Validators","i0","LoginComponent","constructor","authService","router","email","required","senha","login","loginForm","valid","value","subscribe","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/roiney/work/Pessoal-projects/GEW/app/frontend/src/app/login/login.component.ts","/home/roiney/work/Pessoal-projects/GEW/app/frontend/src/app/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthServiceService } from '../auth-service.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\nloginForm: FormGroup = new FormGroup({\n    email: new FormControl(null, [Validators.required, Validators.email]),\n   senha: new FormControl(null, [Validators.required]),\n  });\n\n  constructor(\n    private authService: AuthServiceService,\n    private router: Router\n  ) { }\n\nlogin() {\n    if (!this.loginForm.valid) {\n      return;\n    }\n    this.authService.login(this.loginForm.value).subscribe();\n  }\n}\n","<div fxLayoutAlign=\"center center\" fxFlexFill class=\"main-div\">\n  <mat-card fxFlex=\"25\">\n    <mat-toolbar>Página de Login</mat-toolbar>\n    <form fxLayoutAlign=\"street\" fxLayout=\"column\" class=\"farm-class\" [formGroup]=\"loginForm\"\n      (ngSubmit)=\"login()\">\n\n      <mat-form-field>\n        <mat-label>E-mail</mat-label>\n        <input matInput placeholder=\"Ex: path@exemple.com\" formControlName=\"email\">\n        <mat-error *ngIf=\"this.loginForm.get('email')?.touched && this.loginForm.get('email')?.hasError('required')\">\n          Email is required</mat-error>\n      </mat-form-field>\n      \n      \n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Senha</mat-label>\n        <input matInput type=\"password\" placeholder=\"senha\" formControlName=\"senha\">\n      </mat-form-field>\n      <button mat-raised-button type=\"submit\">Login</button>\n      <button mat-raised-button [routerLink]=\"'registre-se'\">Register-se</button>\n    </form>\n\n  </mat-card>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}