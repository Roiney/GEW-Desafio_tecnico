{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/forms\";\nfunction RegisterComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Um email deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Um email v\\u00E1lido deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" O nome completo deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password Confirmation is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Passwords are not matching!\");\n    i0.ɵɵelementEnd();\n  }\n}\n// import { CustomValidators } from '../../custom-validator';\n// import { AuthService } from '../../services/auth-service/auth.service';\n// import { tap } from 'rxjs';\n// import { Router } from '@angular/router';\nexport class RegisterComponent {\n  constructor() {\n    this.registerForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      nome: new FormControl(null, [Validators.required]),\n      password: new FormControl(null, [Validators.required]),\n      passwordConfirm: new FormControl(null, [Validators.required])\n    });\n  }\n  register() {\n    // if (!this.registerForm.valid) {\n    //   return;\n    // }\n    // this.authService.register(this.registerForm.value).pipe(\n    //   // If registration was successfull, then navigate to login route\n    //   tap(() => this.router.navigate(['../login']))\n    // ).subscribe();\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)();\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 25,\n  vars: 9,\n  consts: [[\"mat-raised-button\", \"\", 3, \"routerLink\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Email\", \"formControlName\", \"email\"], [4, \"ngIf\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Nome Completo\", \"formControlName\", \"nome\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password Confirmation\", \"formControlName\", \"passwordConfirm\"], [1, \"button\"], [\"type\", \"submit\", \"mat-button\", \"\", 3, \"disabled\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-card\")(4, \"mat-card-title\");\n      i0.ɵɵtext(5, \"Registro de Novos Usu\\u00E1rios\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-card-content\")(7, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.register();\n      });\n      i0.ɵɵelementStart(8, \"mat-form-field\");\n      i0.ɵɵelement(9, \"input\", 2);\n      i0.ɵɵtemplate(10, RegisterComponent_mat_error_10_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵtemplate(11, RegisterComponent_mat_error_11_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-form-field\");\n      i0.ɵɵelement(13, \"input\", 4);\n      i0.ɵɵtemplate(14, RegisterComponent_mat_error_14_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"mat-form-field\");\n      i0.ɵɵelement(16, \"input\", 5);\n      i0.ɵɵtemplate(17, RegisterComponent_mat_error_17_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"mat-form-field\");\n      i0.ɵɵelement(19, \"input\", 6);\n      i0.ɵɵtemplate(20, RegisterComponent_mat_error_20_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(21, RegisterComponent_mat_error_21_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementStart(22, \"div\", 7)(23, \"button\", 8);\n      i0.ɵɵtext(24, \"Register\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      let tmp_2_0;\n      let tmp_3_0;\n      let tmp_4_0;\n      let tmp_5_0;\n      let tmp_6_0;\n      let tmp_7_0;\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", \"\");\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.hasError(\"required\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_3_0.hasError(\"email\")));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.registerForm.get(\"nome\")) == null ? null : tmp_4_0.touched) && ((tmp_4_0 = ctx.registerForm.get(\"nome\")) == null ? null : tmp_4_0.hasError(\"required\")));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_5_0.touched) && ((tmp_5_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_5_0.hasError(\"required\")));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_6_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_6_0.touched) && ((tmp_6_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_6_0.hasError(\"required\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_7_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_7_0.dirty) && ctx.registerForm.hasError(\"passwordsNotMatching\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i1.NgIf, i2.RouterLink, i3.MatFormField, i3.MatError, i4.MatInput, i5.MatButton, i6.MatCard, i6.MatCardContent, i6.MatCardTitle, i7.ɵNgNoValidate, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.FormGroupDirective, i7.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;;;;ICUzDC,iCAC0G;IACxGA,6CAA4B;IAAAA,iBAAY;;;;;IAC1CA,iCACuG;IACrGA,yDAAmC;IAAAA,iBAAY;;;;;IAMjDA,iCACwG;IACtGA,oDAAmC;IAAAA,iBAAY;;;;;IAOjDA,iCACgH;IAC9GA,qCAAoB;IAAAA,iBAAY;;;;;IAKlCA,iCAC8H;IAC5HA,kDAAiC;IAAAA,iBAAY;;;;;IAGjDA,iCACgH;IAC9GA,4CAA2B;IAAAA,iBAAY;;;AD1CjD;AACA;AACA;AACA;AAOA,OAAM,MAAOC,iBAAiB;EAY5BC;IAVA,iBAAY,GAAG,IAAIL,SAAS,CAAC;MAC3BM,KAAK,EAAE,IAAIL,WAAW,CAAC,IAAI,EAAE,CAACC,UAAU,CAACK,QAAQ,EAAEL,UAAU,CAACI,KAAK,CAAC,CAAC;MACrEE,IAAI,EAAE,IAAIP,WAAW,CAAC,IAAI,EAAE,CAACC,UAAU,CAACK,QAAQ,CAAC,CAAC;MAClDE,QAAQ,EAAE,IAAIR,WAAW,CAAC,IAAI,EAAE,CAACC,UAAU,CAACK,QAAQ,CAAC,CAAC;MACtDG,eAAe,EAAE,IAAIT,WAAW,CAAC,IAAI,EAAE,CAACC,UAAU,CAACK,QAAQ,CAAC;KAC7D,CAGA;EAKG;EAEJI,QAAQ;IACN;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;;AAxBSP,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAQ;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ9Bb,2BAAK;MACyCA,qBAAK;MAAAA,iBAAS;MAC1DA,gCAAU;MACQA,+CAA0B;MAAAA,iBAAiB;MAE3DA,wCAAkB;MACiBA;QAAA,OAAYc,cAAU;MAAA,EAAC;MAEtDd,sCAAgB;MACdA,2BAAyE;MACzEA,gFAE0C;MAC1CA,gFAEiD;MACnDA,iBAAiB;MAGjBA,uCAAgB;MACdA,4BAA+E;MAC/EA,gFAEiD;MACnDA,iBAAiB;MAIjBA,uCAAgB;MACdA,4BAAkF;MAClFA,gFAEkC;MACpCA,iBAAiB;MAEjBA,uCAAgB;MACdA,4BAAsG;MACtGA,gFAE+C;MACjDA,iBAAiB;MAEjBA,gFAEyC;MAEzCA,+BAAoB;MAEgDA,yBAAQ;MAAAA,iBAAS;;;;;;;;;MA/CjEA,eAAiB;MAAjBA,+BAAiB;MAKjCA,eAA0B;MAA1BA,4CAA0B;MAKzBA,eAAqG;MAArGA,gMAAqG;MAGrGA,eAAkG;MAAlGA,6LAAkG;MAQlGA,eAAmG;MAAnGA,8LAAmG;MASnGA,eAA2G;MAA3GA,sMAA2G;MAO3GA,eAAyH;MAAzHA,oNAAyH;MAK3HA,eAA2G;MAA3GA,gKAA2G;MAK3EA,eAAgC;MAAhCA,kDAAgC","names":["FormGroup","FormControl","Validators","i0","RegisterComponent","constructor","email","required","nome","password","passwordConfirm","register","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/roiney/work/Pessoal-projects/GEW/app/frontend/src/app/register/register.component.ts","/home/roiney/work/Pessoal-projects/GEW/app/frontend/src/app/register/register.component.html"],"sourcesContent":["import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component } from '@angular/core';\n// import { CustomValidators } from '../../custom-validator';\n// import { AuthService } from '../../services/auth-service/auth.service';\n// import { tap } from 'rxjs';\n// import { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  registerForm = new FormGroup({\n    email: new FormControl(null, [Validators.required, Validators.email]),\n    nome: new FormControl(null, [Validators.required]),\n    password: new FormControl(null, [Validators.required]),\n    passwordConfirm: new FormControl(null, [Validators.required])\n  },\n    // add custom Validators to the form, to make sure that password and passwordConfirm are equal\n    // { validators: CustomValidators.passwordsMatching }\n  )\n\n  constructor(\n    // private router: Router,\n    // private authService: AuthService\n  ) { }\n\n  register() {\n    // if (!this.registerForm.valid) {\n    //   return;\n    // }\n    // this.authService.register(this.registerForm.value).pipe(\n    //   // If registration was successfull, then navigate to login route\n    //   tap(() => this.router.navigate(['../login']))\n    // ).subscribe();\n  }\n\n}","<div>\n  <button mat-raised-button [routerLink]=\"''\">Login</button>\n  <mat-card>\n    <mat-card-title>Registro de Novos Usuários</mat-card-title>\n\n    <mat-card-content>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n\n        <mat-form-field>\n          <input type=\"email\" matInput placeholder=\"Email\" formControlName=\"email\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('email')?.touched && this.registerForm.get('email')?.hasError('required')\">\n            Um email deve ser informado!</mat-error>\n          <mat-error\n            *ngIf=\"this.registerForm.get('email')?.touched && this.registerForm.get('email')?.hasError('email')\">\n            Um email válido deve ser informado!</mat-error>\n        </mat-form-field>\n\n      \n        <mat-form-field>\n          <input type=\"text\" matInput placeholder=\"Nome Completo\" formControlName=\"nome\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('nome')?.touched && this.registerForm.get('nome')?.hasError('required')\">\n            O nome completo deve ser informado!</mat-error>\n        </mat-form-field>\n\n\n\n        <mat-form-field>\n          <input type=\"password\" matInput placeholder=\"Password\" formControlName=\"password\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('password')?.touched && this.registerForm.get('password')?.hasError('required')\">\n            Password is required</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <input type=\"password\" matInput placeholder=\"Password Confirmation\" formControlName=\"passwordConfirm\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('passwordConfirm')?.touched && this.registerForm.get('passwordConfirm')?.hasError('required')\">\n            Password Confirmation is required</mat-error>\n        </mat-form-field>\n\n        <mat-error\n          *ngIf=\"this.registerForm.get('passwordConfirm')?.dirty && this.registerForm.hasError('passwordsNotMatching')\">\n          Passwords are not matching!</mat-error>\n\n        <div class=\"button\">\n          <!-- Button is disabled(not clickable), if our RegisterForm contains Validation Errors -->\n          <button type=\"submit\" mat-button [disabled]=\"!registerForm.valid\">Register</button>\n        </div>\n\n      </form>\n    </mat-card-content>\n\n  </mat-card>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}