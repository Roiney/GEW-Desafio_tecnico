{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CustomValidators } from '../costum-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth-service.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"@angular/material/datepicker\";\nfunction RegisterComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Um email deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Um email v\\u00E1lido deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" O nome completo deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" A data de Nascimento deve ser informada!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" O CEP deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" O endere\\u00E7o completo deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" A cidade deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" A cidade deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Uma senha deve ser informada!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Confirme sua senha!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_62_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Passwords are not matching!\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.registerForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      nome: new FormControl(null, [Validators.required]),\n      data_nascimento: new FormControl(null, [Validators.required]),\n      CEP: new FormControl(null, [Validators.required]),\n      endereco: new FormControl(null, [Validators.required]),\n      cidade: new FormControl(null, [Validators.required]),\n      estado: new FormControl(null, [Validators.required]),\n      senha: new FormControl(null, [Validators.required]),\n      passwordConfirm: new FormControl(null, [Validators.required])\n    }, {\n      validators: CustomValidators.passwordsMatching\n    });\n  }\n  register() {\n    if (!this.registerForm.valid) {\n      return;\n    }\n    this.authService.cadastro(this.registerForm.value).subscribe(result => {\n      if (result) alert(result);\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthServiceService), i0.ɵɵdirectiveInject(i2.Router));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 66,\n  vars: 16,\n  consts: [[\"mat-raised-button\", \"\", 3, \"routerLink\"], [1, \"main-div\"], [3, \"formGroup\", \"ngSubmit\"], [\"fxLayout\", \"row\"], [\"fxFlexOffset\", \"10\", \"fxFlex\", \"100\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Email\", \"formControlName\", \"email\"], [4, \"ngIf\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Nome Completo\", \"formControlName\", \"nome\"], [\"matInput\", \"\", \"formControlName\", \"data_nascimento\", 3, \"matDatepicker\"], [\"matIconSuffix\", \"\", 3, \"for\"], [\"matDatepickerToggleIcon\", \"\"], [\"picker\", \"\"], [\"matInput\", \"\", \"placeholder\", \"CEP\", \"formControlName\", \"CEP\"], [\"matInput\", \"\", \"placeholder\", \"endereco\", \"formControlName\", \"endereco\"], [\"matInput\", \"\", \"placeholder\", \"cidade\", \"formControlName\", \"cidade\"], [\"matInput\", \"\", \"placeholder\", \"estado\", \"formControlName\", \"estado\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"senha\", \"formControlName\", \"senha\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password Confirmation\", \"formControlName\", \"passwordConfirm\"], [1, \"button\"], [\"type\", \"submit\", \"mat-button\", \"\", 3, \"disabled\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵtext(1, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"mat-card\")(4, \"mat-card-title\");\n      i0.ɵɵtext(5, \"Registro de Novos Usu\\u00E1rios\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"mat-card-content\")(8, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_8_listener() {\n        return ctx.register();\n      });\n      i0.ɵɵelementStart(9, \"div\", 3)(10, \"div\", 4)(11, \"mat-form-field\");\n      i0.ɵɵelement(12, \"input\", 5);\n      i0.ɵɵtemplate(13, RegisterComponent_mat_error_13_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵtemplate(14, RegisterComponent_mat_error_14_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"div\", 3)(16, \"div\", 4)(17, \"mat-form-field\");\n      i0.ɵɵelement(18, \"input\", 7);\n      i0.ɵɵtemplate(19, RegisterComponent_mat_error_19_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(20, \"div\", 3)(21, \"div\", 4)(22, \"mat-form-field\")(23, \"mat-label\");\n      i0.ɵɵtext(24, \"Data de Nascimento\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"input\", 8);\n      i0.ɵɵelementStart(26, \"mat-datepicker-toggle\", 9)(27, \"mat-icon\", 10);\n      i0.ɵɵtext(28, \"keyboard_arrow_down\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(29, \"mat-datepicker\", null, 11);\n      i0.ɵɵtemplate(31, RegisterComponent_mat_error_31_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(32, \"div\", 3)(33, \"div\", 4)(34, \"mat-form-field\");\n      i0.ɵɵelement(35, \"input\", 12);\n      i0.ɵɵtemplate(36, RegisterComponent_mat_error_36_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(37, \"div\", 3)(38, \"div\", 4)(39, \"mat-form-field\");\n      i0.ɵɵelement(40, \"input\", 13);\n      i0.ɵɵtemplate(41, RegisterComponent_mat_error_41_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(42, \"div\", 3)(43, \"div\", 4)(44, \"mat-form-field\");\n      i0.ɵɵelement(45, \"input\", 14);\n      i0.ɵɵtemplate(46, RegisterComponent_mat_error_46_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(47, \"div\", 3)(48, \"div\", 4)(49, \"mat-form-field\");\n      i0.ɵɵelement(50, \"input\", 15);\n      i0.ɵɵtemplate(51, RegisterComponent_mat_error_51_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(52, \"div\", 3)(53, \"div\", 4)(54, \"mat-form-field\");\n      i0.ɵɵelement(55, \"input\", 16);\n      i0.ɵɵtemplate(56, RegisterComponent_mat_error_56_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(57, \"div\", 3)(58, \"div\", 4)(59, \"mat-form-field\");\n      i0.ɵɵelement(60, \"input\", 17);\n      i0.ɵɵtemplate(61, RegisterComponent_mat_error_61_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(62, RegisterComponent_mat_error_62_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(63, \"div\", 18)(64, \"button\", 19);\n      i0.ɵɵtext(65, \"Register\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(30);\n      let tmp_2_0;\n      let tmp_3_0;\n      let tmp_4_0;\n      let tmp_7_0;\n      let tmp_8_0;\n      let tmp_9_0;\n      let tmp_10_0;\n      let tmp_11_0;\n      let tmp_12_0;\n      let tmp_13_0;\n      let tmp_14_0;\n      i0.ɵɵproperty(\"routerLink\", \"\");\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.hasError(\"required\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_3_0.hasError(\"email\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.registerForm.get(\"nome\")) == null ? null : tmp_4_0.touched) && ((tmp_4_0 = ctx.registerForm.get(\"nome\")) == null ? null : tmp_4_0.hasError(\"required\")));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"matDatepicker\", _r3);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"for\", _r3);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_7_0 = ctx.registerForm.get(\"data_nascimento\")) == null ? null : tmp_7_0.touched) && ((tmp_7_0 = ctx.registerForm.get(\"data_nascimento\")) == null ? null : tmp_7_0.hasError(\"required\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_8_0 = ctx.registerForm.get(\"CEP\")) == null ? null : tmp_8_0.touched) && ((tmp_8_0 = ctx.registerForm.get(\"CEP\")) == null ? null : tmp_8_0.hasError(\"required\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_9_0 = ctx.registerForm.get(\"endereco\")) == null ? null : tmp_9_0.touched) && ((tmp_9_0 = ctx.registerForm.get(\"endereco\")) == null ? null : tmp_9_0.hasError(\"required\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_10_0 = ctx.registerForm.get(\"cidade\")) == null ? null : tmp_10_0.touched) && ((tmp_10_0 = ctx.registerForm.get(\"cidade\")) == null ? null : tmp_10_0.hasError(\"required\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_11_0 = ctx.registerForm.get(\"estado\")) == null ? null : tmp_11_0.touched) && ((tmp_11_0 = ctx.registerForm.get(\"estado\")) == null ? null : tmp_11_0.hasError(\"required\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_12_0 = ctx.registerForm.get(\"senha\")) == null ? null : tmp_12_0.touched) && ((tmp_12_0 = ctx.registerForm.get(\"senha\")) == null ? null : tmp_12_0.hasError(\"required\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_13_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_13_0.touched) && ((tmp_13_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_13_0.hasError(\"required\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_14_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_14_0.dirty) && ctx.registerForm.hasError(\"passwordsNotMatching\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i3.NgIf, i2.RouterLink, i4.DefaultLayoutDirective, i4.DefaultFlexOffsetDirective, i4.DefaultFlexDirective, i5.MatFormField, i5.MatLabel, i5.MatError, i5.MatSuffix, i6.MatInput, i7.MatButton, i8.MatCard, i8.MatCardContent, i8.MatCardTitle, i9.ɵNgNoValidate, i9.DefaultValueAccessor, i9.NgControlStatus, i9.NgControlStatusGroup, i9.FormGroupDirective, i9.FormControlName, i10.MatDatepicker, i10.MatDatepickerInput, i10.MatDatepickerToggle, i10.MatDatepickerToggleIcon],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","CustomValidators","i0","RegisterComponent","constructor","authService","router","email","required","nome","data_nascimento","CEP","endereco","cidade","estado","senha","passwordConfirm","validators","passwordsMatching","register","registerForm","valid","cadastro","value","subscribe","result","alert","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/roiney/work/Pessoal-projects/GEW/app/frontend/src/app/register/register.component.ts","/home/roiney/work/Pessoal-projects/GEW/app/frontend/src/app/register/register.component.html"],"sourcesContent":["import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthServiceService } from '../auth-service.service';\nimport { CustomValidators } from '../costum-validator';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  registerForm = new FormGroup({\n    email: new FormControl(null, [Validators.required, Validators.email]),\n    nome: new FormControl(null, [Validators.required]),\n    data_nascimento: new FormControl(null, [Validators.required]),\n    CEP: new FormControl(null, [Validators.required]),\n    endereco: new FormControl(null, [Validators.required]),\n    cidade: new FormControl(null, [Validators.required]),\n    estado: new FormControl(null, [Validators.required]),\n    senha: new FormControl(null, [Validators.required]),\n    passwordConfirm: new FormControl(null, [Validators.required])\n  },\n    { validators: CustomValidators.passwordsMatching }\n  )\n\n  constructor(private authService: AuthServiceService,\n    private router: Router) { }\n\n  register() {\n    if (!this.registerForm.valid) {\n      return;\n    }\n    this.authService.cadastro(this.registerForm.value).subscribe(result => {\n      if (result)\n        alert(result)\n    });\n  }\n\n}","<button mat-raised-button [routerLink]=\"''\">Login</button>\n\n<div class=\"main-div\">\n  <mat-card>\n    <mat-card-title>Registro de Novos Usuários</mat-card-title>\n    <div class=\"main-div\">\n      <mat-card-content>\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <input type=\"email\" matInput placeholder=\"Email\" formControlName=\"email\">\n                <mat-error\n                  *ngIf=\"this.registerForm.get('email')?.touched && this.registerForm.get('email')?.hasError('required')\">\n                  Um email deve ser informado!</mat-error>\n                <mat-error\n                  *ngIf=\"this.registerForm.get('email')?.touched && this.registerForm.get('email')?.hasError('email')\">\n                  Um email válido deve ser informado!</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <input type=\"text\" matInput placeholder=\"Nome Completo\" formControlName=\"nome\">\n                <mat-error\n                  *ngIf=\"this.registerForm.get('nome')?.touched && this.registerForm.get('nome')?.hasError('required')\">\n                  O nome completo deve ser informado!</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <mat-label>Data de Nascimento</mat-label>\n                <input matInput [matDatepicker]=\"picker\" formControlName=\"data_nascimento\">\n                <mat-datepicker-toggle matIconSuffix [for]=\"picker\">\n                  <mat-icon matDatepickerToggleIcon>keyboard_arrow_down</mat-icon>\n                </mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n                <mat-error\n                  *ngIf=\"this.registerForm.get('data_nascimento')?.touched && this.registerForm.get('data_nascimento')?.hasError('required')\">\n                  A data de Nascimento deve ser informada!</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"CEP\" formControlName=\"CEP\">\n                <mat-error\n                  *ngIf=\"this.registerForm.get('CEP')?.touched && this.registerForm.get('CEP')?.hasError('required')\">\n                  O CEP deve ser informado!</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"endereco\" formControlName=\"endereco\">\n                <mat-error\n                  *ngIf=\"this.registerForm.get('endereco')?.touched && this.registerForm.get('endereco')?.hasError('required')\">\n                  O endereço completo deve ser informado!</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"cidade\" formControlName=\"cidade\">\n                <mat-error\n                  *ngIf=\"this.registerForm.get('cidade')?.touched && this.registerForm.get('cidade')?.hasError('required')\">\n                  A cidade deve ser informado!</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"estado\" formControlName=\"estado\">\n                <mat-error\n                  *ngIf=\"this.registerForm.get('estado')?.touched && this.registerForm.get('estado')?.hasError('required')\">\n                  A cidade deve ser informado!</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <input type=\"password\" matInput placeholder=\"senha\" formControlName=\"senha\">\n                <mat-error\n                  *ngIf=\"this.registerForm.get('senha')?.touched && this.registerForm.get('senha')?.hasError('required')\">\n                  Uma senha deve ser informada!</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\">\n            <div fxFlexOffset=\"10\" fxFlex=\"100\">\n              <mat-form-field>\n                <input type=\"password\" matInput placeholder=\"Password Confirmation\" formControlName=\"passwordConfirm\">\n                <mat-error\n                  *ngIf=\"this.registerForm.get('passwordConfirm')?.touched && this.registerForm.get('passwordConfirm')?.hasError('required')\">\n                  Confirme sua senha!</mat-error>\n              </mat-form-field>\n              <mat-error\n                *ngIf=\"this.registerForm.get('passwordConfirm')?.dirty && this.registerForm.hasError('passwordsNotMatching')\">\n                Passwords are not matching!</mat-error>\n            </div>\n          </div>\n\n          <div class=\"button\">\n            <button type=\"submit\" mat-button [disabled]=\"!registerForm.valid\">Register</button>\n          </div>\n\n        </form>\n      </mat-card-content>\n    </div>\n\n  </mat-card>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}