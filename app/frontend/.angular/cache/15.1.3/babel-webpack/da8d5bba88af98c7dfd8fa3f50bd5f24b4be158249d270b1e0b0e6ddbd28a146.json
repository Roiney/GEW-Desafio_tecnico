{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../cep-service.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular/material/datepicker\";\nfunction RegisterComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Um email deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Um email v\\u00E1lido deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" O nome completo deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" A data de Nascimento deve ser informada!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" O nome completo deve ser informado!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password Confirmation is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Passwords are not matching!\");\n    i0.ɵɵelementEnd();\n  }\n}\n// import { CustomValidators } from '../../custom-validator';\n// import { AuthService } from '../../services/auth-service/auth.service';\n// import { tap } from 'rxjs';\n// import { Router } from '@angular/router';\nexport class RegisterComponent {\n  constructor(cepService) {\n    this.cepService = cepService;\n    this.registerForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      nome: new FormControl(null, [Validators.required]),\n      data_nascimento: new FormControl(null, [Validators.required]),\n      CEP: new FormControl(null, [Validators.required]),\n      password: new FormControl(null, [Validators.required]),\n      passwordConfirm: new FormControl(null, [Validators.required])\n    });\n  }\n  consultaCep(target) {\n    if (target instanceof EventTarget) {\n      var elemento = target;\n      this.cepService.buscar(elemento).subscribe(dados => {\n        console.log(dados);\n      });\n    }\n    register();\n    {\n      // if (!this.registerForm.valid) {\n      //   return;\n      // }\n      // this.authService.register(this.registerForm.value).pipe(\n      //   // If registration was successfull, then navigate to login route\n      //   tap(() => this.router.navigate(['../login']))\n      // ).subscribe();\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.CepServiceService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 40,\n  vars: 13,\n  consts: [[\"mat-raised-button\", \"\", 3, \"routerLink\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Email\", \"formControlName\", \"email\"], [4, \"ngIf\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Nome Completo\", \"formControlName\", \"nome\"], [\"matInput\", \"\", \"formControlName\", \"data_nascimento\", 3, \"matDatepicker\"], [\"matIconSuffix\", \"\", 3, \"for\"], [\"matDatepickerToggleIcon\", \"\"], [\"picker\", \"\"], [\"matInput\", \"\", \"placeholder\", \"CEP\", \"formControlName\", \"CEP\", 3, \"blur\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password Confirmation\", \"formControlName\", \"passwordConfirm\"], [1, \"button\"], [\"type\", \"submit\", \"mat-button\", \"\", 3, \"disabled\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-card\")(4, \"mat-card-title\");\n      i0.ɵɵtext(5, \"Registro de Novos Usu\\u00E1rios\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-card-content\")(7, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.register();\n      });\n      i0.ɵɵelementStart(8, \"mat-form-field\");\n      i0.ɵɵelement(9, \"input\", 2);\n      i0.ɵɵtemplate(10, RegisterComponent_mat_error_10_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵtemplate(11, RegisterComponent_mat_error_11_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-form-field\");\n      i0.ɵɵelement(13, \"input\", 4);\n      i0.ɵɵtemplate(14, RegisterComponent_mat_error_14_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"mat-form-field\")(16, \"mat-label\");\n      i0.ɵɵtext(17, \"Data de Nascimento\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 5);\n      i0.ɵɵelementStart(19, \"mat-hint\");\n      i0.ɵɵtext(20, \"MM/DD/YYYY\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"mat-datepicker-toggle\", 6)(22, \"mat-icon\", 7);\n      i0.ɵɵtext(23, \"keyboard_arrow_down\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(24, \"mat-datepicker\", null, 8);\n      i0.ɵɵtemplate(26, RegisterComponent_mat_error_26_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"mat-form-field\")(28, \"input\", 9);\n      i0.ɵɵlistener(\"blur\", function RegisterComponent_Template_input_blur_28_listener($event) {\n        return ctx.consultaCep($event.target, ctx.f);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(29, RegisterComponent_mat_error_29_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"mat-form-field\");\n      i0.ɵɵelement(31, \"input\", 10);\n      i0.ɵɵtemplate(32, RegisterComponent_mat_error_32_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"mat-form-field\");\n      i0.ɵɵelement(34, \"input\", 11);\n      i0.ɵɵtemplate(35, RegisterComponent_mat_error_35_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(36, RegisterComponent_mat_error_36_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementStart(37, \"div\", 12)(38, \"button\", 13);\n      i0.ɵɵtext(39, \"Register\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(25);\n      let tmp_2_0;\n      let tmp_3_0;\n      let tmp_4_0;\n      let tmp_7_0;\n      let tmp_8_0;\n      let tmp_9_0;\n      let tmp_10_0;\n      let tmp_11_0;\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", \"\");\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.hasError(\"required\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_3_0.hasError(\"email\")));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.registerForm.get(\"nome\")) == null ? null : tmp_4_0.touched) && ((tmp_4_0 = ctx.registerForm.get(\"nome\")) == null ? null : tmp_4_0.hasError(\"required\")));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matDatepicker\", _r3);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"for\", _r3);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_7_0 = ctx.registerForm.get(\"data_nascimento\")) == null ? null : tmp_7_0.touched) && ((tmp_7_0 = ctx.registerForm.get(\"data_nascimento\")) == null ? null : tmp_7_0.hasError(\"required\")));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_8_0 = ctx.registerForm.get(\"CEP\")) == null ? null : tmp_8_0.touched) && ((tmp_8_0 = ctx.registerForm.get(\"CEP\")) == null ? null : tmp_8_0.hasError(\"required\")));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_9_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_9_0.touched) && ((tmp_9_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_9_0.hasError(\"required\")));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_10_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_10_0.touched) && ((tmp_10_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_10_0.hasError(\"required\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_11_0 = ctx.registerForm.get(\"passwordConfirm\")) == null ? null : tmp_11_0.dirty) && ctx.registerForm.hasError(\"passwordsNotMatching\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.RouterLink, i4.MatFormField, i4.MatLabel, i4.MatHint, i4.MatError, i4.MatSuffix, i5.MatInput, i6.MatButton, i7.MatCard, i7.MatCardContent, i7.MatCardTitle, i8.ɵNgNoValidate, i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgControlStatusGroup, i8.FormGroupDirective, i8.FormControlName, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i9.MatDatepickerToggleIcon],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","RegisterComponent","constructor","cepService","email","required","nome","data_nascimento","CEP","password","passwordConfirm","consultaCep","target","EventTarget","elemento","buscar","subscribe","dados","console","log","register","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/roiney/work/Pessoal-projects/GEW/app/frontend/src/app/register/register.component.ts","/home/roiney/work/Pessoal-projects/GEW/app/frontend/src/app/register/register.component.html"],"sourcesContent":["import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component } from '@angular/core';\nimport { CepServiceService } from '../cep-service.service';\n// import { CustomValidators } from '../../custom-validator';\n// import { AuthService } from '../../services/auth-service/auth.service';\n// import { tap } from 'rxjs';\n// import { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  registerForm = new FormGroup({\n    email: new FormControl(null, [Validators.required, Validators.email]),\n    nome: new FormControl(null, [Validators.required]),\n    data_nascimento: new FormControl(null, [Validators.required]),\n    CEP: new FormControl(null, [Validators.required]),\n    password: new FormControl(null, [Validators.required]),\n    passwordConfirm: new FormControl(null, [Validators.required])\n  },\n    // add custom Validators to the form, to make sure that password and passwordConfirm are equal\n    // { validators: CustomValidators.passwordsMatching }\n  )\n\n  constructor(private cepService: CepServiceService  ) { }\n\n  consultaCep(target : any){\n    if(target instanceof EventTarget) {\n      var elemento = target as HTMLInputElement;\n      this.cepService.buscar(elemento).subscribe((dados) => {\n      console.log(dados);\n      \n    })\n  }\n\n\n  register() {\n    // if (!this.registerForm.valid) {\n    //   return;\n    // }\n    // this.authService.register(this.registerForm.value).pipe(\n    //   // If registration was successfull, then navigate to login route\n    //   tap(() => this.router.navigate(['../login']))\n    // ).subscribe();\n  }\n\n}","<div>\n  <button mat-raised-button [routerLink]=\"''\">Login</button>\n  <mat-card>\n    <mat-card-title>Registro de Novos Usuários</mat-card-title>\n\n    <mat-card-content>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n\n        <mat-form-field>\n          <input type=\"email\" matInput placeholder=\"Email\" formControlName=\"email\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('email')?.touched && this.registerForm.get('email')?.hasError('required')\">\n            Um email deve ser informado!</mat-error>\n          <mat-error\n            *ngIf=\"this.registerForm.get('email')?.touched && this.registerForm.get('email')?.hasError('email')\">\n            Um email válido deve ser informado!</mat-error>\n        </mat-form-field>\n\n\n        <mat-form-field>\n          <input type=\"text\" matInput placeholder=\"Nome Completo\" formControlName=\"nome\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('nome')?.touched && this.registerForm.get('nome')?.hasError('required')\">\n            O nome completo deve ser informado!</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Data de Nascimento</mat-label>\n          <input matInput [matDatepicker]=\"picker\" formControlName=\"data_nascimento\">\n          <mat-hint>MM/DD/YYYY</mat-hint>\n          <mat-datepicker-toggle matIconSuffix [for]=\"picker\">\n            <mat-icon matDatepickerToggleIcon>keyboard_arrow_down</mat-icon>\n          </mat-datepicker-toggle>\n          <mat-datepicker #picker></mat-datepicker>\n          <mat-error\n            *ngIf=\"this.registerForm.get('data_nascimento')?.touched && this.registerForm.get('data_nascimento')?.hasError('required')\">\n            A data de Nascimento deve ser informada!</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <input matInput placeholder=\"CEP\"  formControlName=\"CEP\" (blur)=\"consultaCep($event.target, f)\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('CEP')?.touched && this.registerForm.get('CEP')?.hasError('required')\">\n            O nome completo deve ser informado!</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <input type=\"password\" matInput placeholder=\"Password\" formControlName=\"password\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('password')?.touched && this.registerForm.get('password')?.hasError('required')\">\n            Password is required</mat-error>\n        </mat-form-field>\n\n        <mat-form-field>\n          <input type=\"password\" matInput placeholder=\"Password Confirmation\" formControlName=\"passwordConfirm\">\n          <mat-error\n            *ngIf=\"this.registerForm.get('passwordConfirm')?.touched && this.registerForm.get('passwordConfirm')?.hasError('required')\">\n            Password Confirmation is required</mat-error>\n        </mat-form-field>\n\n        <mat-error\n          *ngIf=\"this.registerForm.get('passwordConfirm')?.dirty && this.registerForm.hasError('passwordsNotMatching')\">\n          Passwords are not matching!</mat-error>\n\n        <div class=\"button\">\n          <!-- Button is disabled(not clickable), if our RegisterForm contains Validation Errors -->\n          <button type=\"submit\" mat-button [disabled]=\"!registerForm.valid\">Register</button>\n        </div>\n\n      </form>\n    </mat-card-content>\n\n  </mat-card>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}